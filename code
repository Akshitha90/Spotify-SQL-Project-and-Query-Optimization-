i have solved project by dividing them into set of questions 

**create table**
```sql
CREATE TABLE spotify (
    artist VARCHAR(255),
    track VARCHAR(255),
    album VARCHAR(255),
    album_type VARCHAR(50),
    danceability FLOAT,
    energy FLOAT,
    loudness FLOAT,
    speechiness FLOAT,
    acousticness FLOAT,
    instrumentalness FLOAT,
    liveness FLOAT,
    valence FLOAT,
    tempo FLOAT,
    duration_min FLOAT,
    title VARCHAR(255),
    channel VARCHAR(255),
    views FLOAT,
    likes BIGINT,
    comments BIGINT,
    licensed BOOLEAN,
    official_video BOOLEAN,
    stream BIGINT,
    energy_liveness FLOAT,
    most_played_on VARCHAR(50)
);

```sql
--EDA
select count(*) from spotify;
select count(distinct(artist)) from spotify;
select count(distinct(album)) from spotify;
select distinct album_type from spotify;
select max(duration_min) from spotify;
select min(duration_min) from spotify;
select * from spotify 
where duration_min =0;
delete from spotify where duration_min =0;
select distinct channel from spotify;
select distinct most_played_on  from spotify;
```


**QUESTONS**
1.Retrieve the names of all tracks that have more than 1 billion streams.
```sql
select * from spotify
where stream >1000000000;
```
--2. List all albums along with their respective artists.
```sql
select distinct album, artist from spotify
order by 1;
```
--3.Get the total number of comments for tracks where licensed = TRUE.
select sum(comments) from spotify
where licensed='true';
--4.Find all tracks that belong to the album type single.
select *  from spotify 
where album_type = 'single';
--Count the total number of tracks by each artist.
select artist, count(*) from spotify
group by artist;
--Medium Level
--6.Calculate the average danceability of tracks in each album.
select album,avg(danceability) as avg_danceability from spotify
group by album; 
--7.Find the top 5 tracks with the highest energy values.
select track , max(energy)from spotify
group by 1
order by 2 DESC
limit 5;
--8.List all tracks along with their views and likes where official_video = TRUE.
select track, sum(views) as sum_views,
sum(likes) as sum_likes from spotify
where official_video = 'TRUE'
group by track;
--For each album, calculate the total views of all associated tracks.
select track,sum(views)
 from  spotify
group by track;
--Retrieve the track names that have been streamed on 
--Spotify more than YouTube.
select * from
(select track,
coalesce(sum(case when most_played_on='Youtube'then stream END),0)as streamed_on_yt ,
coalesce(sum(case when most_played_on='Spotify'then stream END),0)as streamed_on_sp
from spotify
group by track) as t1
where  streamed_on_sp> streamed_on_yt 
and streamed_on_yt <>0;

--Advanced Level
--1.Find the top 3 most-viewed tracks for each artist using window functions.
with ranking_artist as
(select 
artist,track,
sum(views)as total_view,
dense_rank() over(partition by artist order by sum(views) desc) as rank
from spotify
group by 1,2 
order by 1,3 desc)
select * from ranking_artist where rank <=3;
--Write a query to find tracks where the liveness score is above the average.
select * from spotify 
where liveness > (select avg(liveness) from spotify)
;
--Use a WITH clause to calculate the difference between the highest and lowest energy values for tracks in each album.
WITH cte
AS
(SELECT 
	album,
	MAX(energy) as highest_energy,
	MIN(energy) as lowest_energery
FROM spotify
GROUP BY 1
)
SELECT 
	album,
	highest_energy - lowest_energery as energy_diff
FROM cte
ORDER BY 2 DESC;

--Find tracks where the energy-to-liveness ratio is greater than 1.2.
select track , energy, liveness,(energy/liveness) as ene_liv
from spotify
where (energy/liveness)>1.2
order by ene_liv desc;

--Calculate the cumulative sum of likes for tracks ordered by the number of views, using window functions.
SELECT
    track,
    artist,
    views,
    likes,
    SUM(likes) OVER (
        ORDER BY views DESC
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS cumulative_likes
FROM spotify
ORDER BY views DESC;



